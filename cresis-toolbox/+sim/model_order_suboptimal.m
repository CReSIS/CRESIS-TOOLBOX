
function sources_number = model_order_suboptimal(Nc,Rxx,Nsnap,bin,model_order_method)

% SRAVYA DEBUG
% load params_debug param_debug
% l_norm_all = param_debug.l_norm_all ;
% l_all =param_debug.l_all;
% subopt = param_debug.subopt;

% l: eigen values
[l,index] = sort(eig(Rxx),'descend');


% DCM is symmetric and always we get real eigen values. due to some
% rounding errors in the data generated by matlab we got complex eigen
% values

l = real(l);
l_all(bin,:) = l;
[V,D] = eig(Rxx);
%u: eigen vectors
u = V(:,index);
%normalizing the eigen values
l_norm = l./min(l);               % MIGHT CHANGE THE WAY OF NORMALIZING
l_norm_all(bin,:) = l_norm;



l= l_norm ;  %%%% CHECK HERE using l_norm for calculating log_func (l or l_norm both result in same answer)



M = Nc-1; % max number of sources we are trying to estimate (it can go mupto Nc-1)


for k = 0:M
  
  
  log_lq_term1 =sum(log(l(k+1:end))); %natural log
  log_lq_term2 =(Nc-k)* (  log(   sum(   (l(k+1:end))  /  (Nc-k)  )   )    );
  
  
  log_lq(k+1) = Nsnap*(log_lq_term1  -   log_lq_term2);
  DOF(k+1) = k*((2*Nc)-k) + 1;  % degree of freedom of the space spanned by signal vectors
  
  
end


switch model_order_method
  case 0
    % SRAVYA penalty
    penalty = 75*([0:Nc-1].^2)*(log(Nsnap)^2);
    
  case 1
    %% MDL
    % Minimum descriptive length (MDL)
    penalty = (1/2)*2*DOF*log(Nsnap);
    
    
  case 2
    % Akaike information criterion
    penalty = 2*DOF;
    
  case 3
    
    % Bayesian information criterion
    penalty =  DOF*log(Nsnap);
    
  case 4
    
    
    % Hannan and Quinn criterion
    penalty =  2*DOF*log(log(Nsnap));
    
  case 5
    
    % Corrected AIC
    %eq 9 --- results in paper matches with this eq
    penalty =  (2*Nsnap.*DOF)./(Nsnap-DOF-1);
    
    %eq 19
    %penalty =  (2*Nsnap.*DOF)./(Nsnap-Nc-[0:M]-1);
    
  case 6
    
    q = 0:Nc-1;
    % Vector corrected Kullback information criterion
    penalty =  (Nsnap*Nc*(2.*q+Nc+1))./(Nsnap-Nc-q-1) + (Nsnap*Nc)./(Nsnap-q-((Nc-1)/2))...
      + (2*Nc.*q + Nc*Nc - Nc)./2 ;
  case 7
    
    
    % Weighted-average information criterion
    %         A_tmp = (2*Nsnap.*DOF) ./ (Nsnap-DOF-1);
    %         B_tmp = DOF.*log(Nsnap);
    %         penalty = (A_tmp.^2 + B_tmp.^2) / (A_tmp + B_tmp);
    
    penalty = ((2*Nsnap*DOF).^2 + ((Nsnap-DOF-3).*DOF.*log(Nsnap)).^2 )...
      ./ (2*Nsnap*DOF.*(Nsnap-DOF-3) + (Nsnap-DOF-3).^2 .* DOF*log(Nsnap));
    
  otherwise
    error('Not supported')
    
end


method_title = ['MDL  '; 'AIC  '; 'BIC  '; 'HQ   '; 'AICc '; 'KICvc'; 'WIC  '] ;
cost = -2*log_lq + penalty;

%SRAVYA DEBUG
% subopt{bin}(model_order_method,:) = [-2*log_lq penalty cost]
% 
% param_debug.l_norm_all = l_norm_all;
% param_debug.l_all = l_all;
% param_debug.subopt = subopt;
% 
% save params_debug param_debug




%         figure(2);
%         subplot(2,4,model_order_method)
%         plot(0:M ,cost,'b*-')
%         hold on
%         plot(0:M ,-2*log_lq,'g*-')
%         hold on
%         plot(0:M ,penalty,'-r*')
%         legend('MDL cost','log-likelihood','penalty' ,'location', 'northeast')
%         set(gca,'xtick',0:M)
%         title( method_title(model_order_method,:));
%         ylabel('Cost');
%         xlabel('Estimated number of sources (k)');
%         hold off
%         grid on


[min_cost, index] = min(cost);
sources_number = index-1;

%
%         figure(2);
%         plot(0:M ,cost,'b*-')
%         hold on
%         plot(0:M ,-2*log_lq,'g*-')
%         hold on
%         plot(0:M ,penalty,'-r*')
%         legend('MDL cost','log-likelihood','penalty' ,'location', 'east')
%         set(gca,'xtick',0:M)
%         ylabel('Cost');
%         xlabel('Estimated number of sources (k)');
%         grid on
% hold off




