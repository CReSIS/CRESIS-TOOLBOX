function master(params,param_override)
% master(params,param_override)
%
% Function for processing radar depth sounder data. This function calls all the
% individual processing functions.
%
% IT IS TYPICALLY RUN FROM run_master.m
%
% THIS MASTER RUNS FROM THE PARAM GENERATED BY read_param_xls.m,
% which reads in an excel spread sheet
% (e.g. RADAR_param_YYYY_Mission_Aircraft.xls).
%
% params = struct array of parameters read from read_param_xls
% param_override = parameter structure whos fields will override
%   all fields in params and gRadar (typically used to set the scheduler
%   parameters for this particular run)
%
% gRadar = GLOBAL variable (parameters here are not present in params),
%   These parameters are added to each struct in the params array
%
% Please make a local copy of the excel spread sheet and run_master.
%
% Authors: Brady Maasen, John Paden
%
% See also: run_master

%error('Copy this script locally, remove this line, and then run.\n');

% =====================================================================
% Create param structure array
% =====================================================================
tic;
global gRadar;
fprintf('\n\n========================================================\n\n');

% Input checking
if ~exist('params','var')
  error('Use run_master: A struct array of parameters must be passed in\n');
end
if exist('param_override','var')
  param_override = merge_structs(gRadar,param_override);
else
  param_override = gRadar;
end

% =====================================================================
% =====================================================================
% Process each of the days
% =====================================================================
% =====================================================================
for param_idx = 1:length(params)
  param = params(param_idx);
  cmd = param.cmd;
  
  if isfield(cmd,'create_vectors') && cmd.create_vectors
    if strcmpi(param.radar_name,'mcords')
      create_vectors_mcords(param,param_override);
    elseif any(strcmpi(param.radar_name,{'mcords4','mcords3','mcords2','seaice'}))
      create_vectors_mcords2(param,param_override);
    elseif strcmpi(param.radar_name,'mcrds')
      create_vectors_mcrds(param,param_override);
    elseif strcmpi(param.radar_name,'accum')
      create_vectors_accum(param,param_override);
    elseif strcmpi(param.radar_name,'accum2')
      create_vectors_accum2(param,param_override);
    elseif any(strcmpi(param.radar_name,{'snow','kuband','snow2','kuband2','snow3','kuband3','kaband3'}))
      create_vectors_fmcw(param,param_override);
    elseif strcmpi(param.radar_name,'acords')
      create_vectors_acords(param,param_override);
    end
  end
  if isfield(cmd,'create_records') && cmd.create_records
    if strcmpi(param.radar_name,'mcords')
      original_sched = param_override.sched.type;
      param.sched.type = 'no scheduler';
      create_records_mcords(param,param_override);
      param.sched.type = original_sched;
    elseif any(strcmpi(param.radar_name,{'hfrds'}))
      hfrds.create_records(param,param_override);
    elseif any(strcmpi(param.radar_name,{'mcords5','mcords4','mcords3','mcords2','seaice'}))
      create_records_mcords2(param,param_override);
    elseif strcmpi(param.radar_name,'mcrds')
      create_records_mcrds(param,param_override);
    elseif strcmpi(param.radar_name,'icards')
      create_records_icards(param,param_override);
    elseif strcmpi(param.radar_name,'accum')
      create_records_fmcw_accum(param,param_override);
    elseif strcmpi(param.radar_name,'accum2')
      create_records_accum2(param,param_override);
    elseif any(strcmpi(param.radar_name,{'snow','kuband','snow2','kuband2','snow3','kuband3','kaband3','snow5'}))
      create_records_fmcw_accum(param,param_override);
    elseif strcmpi(param.radar_name,'acords')
      create_records_acords(param,param_override);
    end
  end
  if isfield(cmd,'create_frames') && cmd.create_frames
    if isempty(param.records.frame_mode) || mod(param.records.frame_mode,2)==0
      create_frames(param,param_override);
      fprintf('Type dbcont to continue when you are done creating frames for this segment.\n');
      keyboard;
    else
      autogenerate_frames(param,param_override);
    end
  end
  if isfield(cmd,'get_heights') && cmd.get_heights
    get_heights(param,param_override);
  end
  if isfield(cmd,'csarp') && cmd.csarp
    csarp(param,param_override);
  end
  if isfield(cmd,'combine_wf_chan') && cmd.combine_wf_chan
    combine_wf_chan(param,param_override);
  end
  
  if isfield(cmd,'generic') && (ischar(cmd.generic) || iscell(cmd.generic))
    % This supports all kinds of permutations for running custom commands
    if ischar(cmd.generic)
      % If generic column is string, then enclose in cell
      cmd.generic = {cmd.generic};
    end
    for generic_idx = 1:length(cmd.generic)
      if iscell(cmd.generic{generic_idx})
        % Type 1: Cell Array with rename
        %   Field 1: command to run
        %   Field 2: {worksheets to load, what to rename the worksheet to}
        % Type 2: cell array
        %   field 1: command to run
        %   field 2: worksheet to load
        param = read_param_xls(param.fn,param.day_seg,cmd.generic{generic_idx}{2});
        generic_fh = str2func(cmd.generic{generic_idx}{1});
      else
        % Type 3: String
        %   String contains command to run
        generic_fh = str2func(cmd.generic{generic_idx});
      end
      generic_fh(param,param_override);
    end
  end
end

return;


